name: Linux

on: [push, pull_request]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          cxx: [g++, clang++]
          build_type: [Debug, Release]
          os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2

    - name: checkout Catch2
      uses: actions/checkout@v2
      with:
        repository: catchorg/Catch2
        path: Catch2
    - name: checkout Catch2 tag v2.13.3
      run: git fetch --prune --unshallow && git checkout tags/v2.13.3
      working-directory: ${{ github.workspace }}/Catch2

    - name: install catch2
      env:
          CXX: ${{matrix.cxx}}
      shell: cmake -P {0}
      run: |
        execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ runner.workspace }}/catch-build)
        execute_process(COMMAND ${CMAKE_COMMAND}
            -S ${{ github.workspace }}/Catch2
            -B ${{ runner.workspace }}/catch-build
            -D CMAKE_BUILD_TYPE=${{matrix.build_type}}
            -D CMAKE_INSTALL_PREFIX=${{ runner.workspace }}/third_party
            -D CATCH_BUILD_TESTING=OFF
            -D CATCH_INSTALL_DOCS=OFF
            -D BUILD_TESTING=OFF
        )
        execute_process(COMMAND ${CMAKE_COMMAND} --build ${{ runner.workspace }}/catch-build RESULT_VARIABLE result)
        execute_process(COMMAND ${CMAKE_COMMAND} --install ${{ runner.workspace }}/catch-build RESULT_VARIABLE result)
        if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
        endif()
      working-directory: ${{ runner.workspace }}

    - name: checkout OnKiCMakeFiles
      uses: actions/checkout@v2
      with:
        repository: whobuilder/OnKiCMakeFiles
        path: OnKiCMakeFiles
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: configure OnKiGenerics
      env:
          CXX: ${{matrix.cxx}}
      shell: cmake -P {0}
      run: |
       execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ runner.workspace }}/build)
       execute_process(COMMAND ${CMAKE_COMMAND}
           -S ${{ github.workspace }}
           -B ${{ runner.workspace }}/build
           -D ONKI_CMAKE_FILES_PATH=${{ github.workspace }}/OnKiCMakeFiles
           -D CMAKE_PREFIX_PATH=${{ runner.workspace }}/third_party
           -D CMAKE_BUILD_TYPE=${{matrix.build_type}} RESULT_VARIABLE result)
       if (NOT result EQUAL 0)
           message(FATAL_ERROR "Bad exit status")
       endif()
      working-directory: ${{ runner.workspace }}
    - name: build OnKiGenerics
      shell: cmake -P {0}
      run: |
       execute_process(COMMAND ${CMAKE_COMMAND} --build ${{ runner.workspace }}/build --config ${{matrix.build_type}} RESULT_VARIABLE result)
       if (NOT result EQUAL 0)
           message(FATAL_ERROR "Bad exit status")
       endif()
      working-directory: ${{ runner.workspace }}
    - name: run OnKiGenerics Tests
      run: ctest -C ${{matrix.build_type}} -V
      working-directory: ${{ runner.workspace }}/build
